{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\cyberxplore-project\\\\frontend\\\\src\\\\Dashboard.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState, useRef } from 'react';\nimport axios from 'axios';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction Dashboard() {\n  _s();\n  const [files, setFiles] = useState([]);\n  const [filter, setFilter] = useState('all');\n  const prevResults = useRef({});\n  const fetchFiles = async () => {\n    try {\n      const res = await axios.get('http://localhost:5000/api/files');\n      const newFiles = res.data;\n\n      // Alert if any file scan is newly completed\n      newFiles.forEach(file => {\n        if (file.status === 'scanned' && prevResults.current[file._id] !== 'scanned') {\n          alert(`Scan complete: ${file.filename} → ${file.result.toUpperCase()}`);\n        }\n      });\n      const currentStatusMap = {};\n      newFiles.forEach(file => {\n        currentStatusMap[file._id] = file.status;\n      });\n      prevResults.current = currentStatusMap;\n      setFiles(newFiles);\n    } catch (err) {\n      console.error('Error fetching files:', err);\n    }\n  };\n  useEffect(() => {\n    fetchFiles();\n    const interval = setInterval(fetchFiles, 5000);\n    return () => clearInterval(interval);\n  }, []);\n  const filteredFiles = files.filter(file => {\n    if (filter === 'all') return true;\n    return file.result === filter || filter === 'pending' && file.status === 'pending';\n  });\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: \"File Scan Dashboard\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"label\", {\n      htmlFor: \"statusFilter\",\n      children: \"Filter by status: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"select\", {\n      id: \"statusFilter\",\n      onChange: e => setFilter(e.target.value),\n      value: filter,\n      children: [/*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"all\",\n        children: \"All\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"clean\",\n        children: \"Clean\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"infected\",\n        children: \"Infected\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"option\", {\n        value: \"pending\",\n        children: \"Pending\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"table\", {\n      children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n        children: /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Filename\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 65,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Status\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 66,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Result\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 67,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Uploaded At\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 68,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n            children: \"Scanned At\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 69,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n        children: filteredFiles.map(f => /*#__PURE__*/_jsxDEV(\"tr\", {\n          children: [/*#__PURE__*/_jsxDEV(\"td\", {\n            children: f.filename\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 75,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            className: f.status === 'pending' ? 'pending' : 'scanned',\n            children: f.status\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            className: f.result,\n            children: f.result || '-'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 79,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: new Date(f.uploadedAt).toLocaleString()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 80,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n            children: f.scannedAt ? new Date(f.scannedAt).toLocaleString() : '-'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 81,\n            columnNumber: 15\n          }, this)]\n        }, f._id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n_s(Dashboard, \"15IKGzSY8akzGdcWPqznxIAa0Pc=\");\n_c = Dashboard;\nexport default Dashboard;\nvar _c;\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","useEffect","useState","useRef","axios","jsxDEV","_jsxDEV","Dashboard","_s","files","setFiles","filter","setFilter","prevResults","fetchFiles","res","get","newFiles","data","forEach","file","status","current","_id","alert","filename","result","toUpperCase","currentStatusMap","err","console","error","interval","setInterval","clearInterval","filteredFiles","children","fileName","_jsxFileName","lineNumber","columnNumber","htmlFor","id","onChange","e","target","value","map","f","className","Date","uploadedAt","toLocaleString","scannedAt","_c","$RefreshReg$"],"sources":["C:/Users/User/cyberxplore-project/frontend/src/Dashboard.js"],"sourcesContent":["import React, { useEffect, useState, useRef } from 'react';\r\nimport axios from 'axios';\r\n\r\nfunction Dashboard() {\r\n  const [files, setFiles] = useState([]);\r\n  const [filter, setFilter] = useState('all');\r\n  const prevResults = useRef({});\r\n\r\n  const fetchFiles = async () => {\r\n    try {\r\n      const res = await axios.get('http://localhost:5000/api/files');\r\n      const newFiles = res.data;\r\n\r\n      // Alert if any file scan is newly completed\r\n      newFiles.forEach(file => {\r\n        if (\r\n          file.status === 'scanned' &&\r\n          prevResults.current[file._id] !== 'scanned'\r\n        ) {\r\n          alert(`Scan complete: ${file.filename} → ${file.result.toUpperCase()}`);\r\n        }\r\n      });\r\n\r\n      const currentStatusMap = {};\r\n      newFiles.forEach(file => {\r\n        currentStatusMap[file._id] = file.status;\r\n      });\r\n      prevResults.current = currentStatusMap;\r\n\r\n      setFiles(newFiles);\r\n    } catch (err) {\r\n      console.error('Error fetching files:', err);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchFiles();\r\n    const interval = setInterval(fetchFiles, 5000);\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  const filteredFiles = files.filter(file => {\r\n    if (filter === 'all') return true;\r\n    return file.result === filter || (filter === 'pending' && file.status === 'pending');\r\n  });\r\n\r\n  return (\r\n    <div>\r\n      <h2>File Scan Dashboard</h2>\r\n      <label htmlFor=\"statusFilter\">Filter by status: </label>\r\n      <select\r\n        id=\"statusFilter\"\r\n        onChange={(e) => setFilter(e.target.value)}\r\n        value={filter}\r\n      >\r\n        <option value=\"all\">All</option>\r\n        <option value=\"clean\">Clean</option>\r\n        <option value=\"infected\">Infected</option>\r\n        <option value=\"pending\">Pending</option>\r\n      </select>\r\n\r\n      <table>\r\n        <thead>\r\n          <tr>\r\n            <th>Filename</th>\r\n            <th>Status</th>\r\n            <th>Result</th>\r\n            <th>Uploaded At</th>\r\n            <th>Scanned At</th>\r\n          </tr>\r\n        </thead>\r\n        <tbody>\r\n          {filteredFiles.map((f) => (\r\n            <tr key={f._id}>\r\n              <td>{f.filename}</td>\r\n              <td className={f.status === 'pending' ? 'pending' : 'scanned'}>\r\n                {f.status}\r\n              </td>\r\n              <td className={f.result}>{f.result || '-'}</td>\r\n              <td>{new Date(f.uploadedAt).toLocaleString()}</td>\r\n              <td>{f.scannedAt ? new Date(f.scannedAt).toLocaleString() : '-'}</td>\r\n            </tr>\r\n          ))}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Dashboard;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}